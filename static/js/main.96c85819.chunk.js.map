{"version":3,"sources":["reportWebVitals.js","components/Button.js","components/ButtonGrid.js","components/EquationField.js","components/CalcFunctions.js","components/AnswersList.js","containers/App.js","fonts/Quicksand-Regular.ttf","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Button","value","className","props","onClick","onClearPressed","onBackPressed","onEqualPressed","onButtonPressed","ButtonGrid","id","buttonsJson","map","obj","EquationField","equationText","equationTextEdited","onKeyPress","type","onChange","calculate","forEach","e","i","length","slice","product","quotient","sum","difference","tryEquals","line","tmpLine","String","replaceAll","includes","JSON","parse","jsonify","AnswersList","listItems","answers","val","style","listStyle","textAlign","paddingLeft","App","shouldErrorShow","b","text","setState","errorText","btn","keyValue","target","newText","state","substr","result","concat","str","Array","from","char","join","key","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96c85819.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport './Button.css';\n\nfunction Button({value, className, ...props}){\n\n    const onClick = () => {\n        switch(value){\n            case(\"Clear\"):\n                return props.onClearPressed;\n            case(\"Backspace\"):\n                return props.onBackPressed;\n            case(\"=\"):\n                return props.onEqualPressed;\n            default:\n                return props.onButtonPressed;\n        }\n    }\n\n    return (\n        <button value={value} className={`tc ${className}`} onClick={onClick()}>{value}</button>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport Button from './Button';\nimport './ButtonGrid.css';\nimport buttonsJson from './Buttons.json';\n\nfunction ButtonGrid({ onButtonPressed, onClearPressed, onBackPressed, onEqualPressed}){\n    return(\n        <div id='button-grid'>\n            {buttonsJson.map(obj => {\n                return <Button value={obj.value}className={obj.className} key={obj.value}\n                            onButtonPressed={onButtonPressed}\n                            onClearPressed={onClearPressed}\n                            onBackPressed={onBackPressed}\n                            onEqualPressed={onEqualPressed}\n                        />\n            })}\n        </div>\n    );\n}\n\nexport default ButtonGrid;","import React from 'react';\n\nfunction EquationField({equationText, equationTextEdited, onKeyPress}){\n    return(\n        <input type=\"text\" className=\"f3 mb2 tr pa2\" value={equationText} onChange={equationTextEdited} onKeyPress={onKeyPress}/>\n    )\n}\n\nexport default EquationField;","export function cleanText(str){ // Remove any characters from equation line that are not available with buttons\n    return Array.from(str).map(char => {\n        if(\"1234567890.+-x÷()\".includes(char)){\n            return char;\n        }\n        else if(char === \"*\") return \"x\";\n        else if(char === \"/\") return \"÷\";\n        else if(char === \"[\") return \"(\";\n        else if(char === \"]\") return \")\";\n        else return \"\";\n    }).join('');\n}\n\nfunction jsonify(line){ // Turn equation line into multi-dimensional array\n    let tmpLine = String(line).replaceAll('(', '[').replaceAll(')', ']'); // Make sure line is treated as a string\n\n    // Add quotes and commas around operators since they must be strings during json.parse()\n    for(let i = 0; i < tmpLine.length; i++){\n        if('+-x÷'.includes(tmpLine[i])){\n            tmpLine = tmpLine.slice(0, i+1) + '\",' + tmpLine.slice(i+1);\n            tmpLine = tmpLine.slice(0, i) + ',\"' + tmpLine.slice(i);\n            i += 4;\n        }\n    }\n    tmpLine = '[' + tmpLine + ']'; // Set all items into array\n    tmpLine = tmpLine.replaceAll('[,\"-\",', '[-'); // minus leading number becomes negative number\n    tmpLine = tmpLine.replaceAll('-[', '-1,\"x\",['); // negative outside brackets becomes -1 times whatever is in the brackets\n\n    // parse tmpLine into json format\n    const arr = JSON.parse(tmpLine);\n    return arr;\n\n}\n\nfunction calculate(value){ // Perform recursive order of operations calculation on equation array\n    // first loop P(arenthesis)\n    value.forEach((e, i) => {\n        //if element is object(array), calculate its value\n        if(typeof e === 'object'){\n            value[i] = calculate(e);\n        }\n    })\n\n    // apply negative sign\n    if(value.length > 2 && value[0] === '-'){\n        value[0] = -value[1];\n        value.slice(1,1);\n    }\n\n    // second loop M\n    for(let i = 0; i < value.length; i++){\n        const e = value[i];\n        // if element is 'x' do multiplication\n        if(e === 'x'){\n\n            const product = value[i-1] * value[i+1];\n            value = [...value.slice(0, i-1), product, ...value.slice(i+2)];\n            i-=1;\n        }\n    }\n    // third loop D\n    for(let i = 0; i < value.length; i++){\n        const e = value[i];\n        // if element is '÷' do division\n        if(e === '÷'){\n            const quotient = value[i-1] / value[i+1];\n            value = [...value.slice(0, i-1), quotient, ...value.slice(i+2)];\n            i-=1;\n        }\n    }\n    // fourth loop AS\n    for(let i = 0; i < value.length; i++){\n        const e = value[i];\n        // if element is '+' do addition\n        if(e === '+'){\n            const sum = value[i-1] + value[i+1];\n            value = [...value.slice(0, i-1), sum, ...value.slice(i+2)];\n            i-=1;\n        }\n        // if element is '-' do subtraction\n        if(e === '-'){\n            const difference = value[i-1] - value[i+1];\n            value = [...value.slice(0, i-1), difference, ...value.slice(i+2)];\n            i-=1;\n        }\n    }\n    if(value.length === 1){\n        value = value[0];\n    }\n    // If value ends as a string, there was an error in calculation. Return null\n    if(typeof value === 'string'){\n        return null;\n    }\n    return value;\n}\n\nexport function tryEquals(line){\n    try{\n        const arr = jsonify(line); // Turn equation into json\n        const result = calculate(arr);\n        return result;\n    }\n    catch{ // If syntax error is present in calculation line, return null as error\n        return null\n    }\n}","import React from 'react';\n\nfunction AnswersList({answers}){\n    const listItems = answers.map((val, i) => {\n        return <li key={i} style={{listStyle:\"circle\"}}>{val}</li>\n    })\n    return(\n        <div style={{textAlign:\"left\", paddingLeft:\"50px\"}}>\n            <h3>Answers:</h3>\n            <ol style={{paddingLeft:'25px'}}>\n                {listItems}\n            </ol>\n        </div>\n\n    );\n}\n\nexport default AnswersList;","import React, { Component } from 'react';\nimport ButtonGrid from '../components/ButtonGrid';\nimport EquationField from '../components/EquationField';\nimport { cleanText, tryEquals } from \"../components/CalcFunctions\";\nimport AnswersList from '../components/AnswersList';\n\nclass App extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            equationText : '',\n            errorText : '',\n            answers : []\n        }\n    }\n\n    shouldErrorShow = (b) => {\n        const text = b ? \"Calculation syntax error, please check input.\" : \"\";\n        this.setState({errorText: text});\n    }\n\n    onButtonPressed = (btn) => {\n        let keyValue = btn.target.value;\n        const newText = this.state.equationText + keyValue;\n        this.setState({equationText: newText});\n    }\n\n    onClearPressed = () => {\n        this.setState({equationText: ''});\n    }\n\n    onBackPressed = () => {\n        let newText = this.state.equationText.substr(0, this.state.equationText.length - 1);\n        this.setState({equationText: newText});\n    }\n\n    onEqualPressed = () => {\n        // Create equals function\n        const result = tryEquals(this.state.equationText);\n        if(result === null){\n            this.shouldErrorShow(true);\n            return;\n        }\n        this.setState({answers: [`${this.state.equationText} = ${result}`].concat(this.state.answers)});\n        this.setState({equationText: result});\n        this.shouldErrorShow(false);\n    }\n\n    equationTextEdited = (e) => {\n        const newText = cleanText(e.target.value);\n        this.setState({equationText: newText});\n    }\n\n    onKeyPress = (e) => {\n        if(e.key === \"Enter\"){\n            this.onEqualPressed();\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"tc flex flex-column pa2\">\n                <h1>Super Basic Calculator</h1>\n                <EquationField equationText={this.state.equationText} equationTextEdited={this.equationTextEdited} onKeyPress={this.onKeyPress}/>\n                <ButtonGrid \n                    onButtonPressed={this.onButtonPressed}\n                    onClearPressed={this.onClearPressed}\n                    onBackPressed={this.onBackPressed}\n                    onEqualPressed={this.onEqualPressed}\n                />\n                <p className=\"red\">{this.state.errorText}</p>\n                <AnswersList answers={this.state.answers}/>\n            </div>\n        )\n    }\n}\n\nexport default App;","export default __webpack_public_path__ + \"static/media/Quicksand-Regular.cffc2790.ttf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\nimport './fonts/Quicksand-Regular.ttf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}